1. gfg solution/////

vector<int> reverseLevelOrder(Node *root)
{
    vector<int>ans;
    if(!root)return ans;
    
     queue<Node*>q;
     q.push(root);
     
     while(!q.empty()){
         Node* temp = q.front();
         ans.push_back(temp->data);
         q.pop();
         
         if(temp->right){
             q.push(temp->right);
         }
         
         if(temp->left){
             q.push(temp->left);
         } 
     }
     reverse(ans.begin(), ans.end());
     return ans;  
}



2.// leet code solution////////////////////////////////////////////////////////////////////


class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {

        vector<vector<int>>ans;
        if(!root){
            return ans;
        }

        queue<TreeNode*>q;
        q.push(root);

        while(!q.empty()){
            int size = q.size();
            vector<int>v;
            for(int i= 0 ; i<size; i++){
               TreeNode* temp = q.front();
               v.push_back(temp->val);
               q.pop();
               
               if(temp->left){
                   q.push(temp->left);
               }
               if(temp->right){
                   q.push(temp->right);
               }
            }
        ans.push_back(v);
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};
