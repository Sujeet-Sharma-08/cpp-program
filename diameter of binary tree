//leet code solution
class Solution {
  public:
    // Function to return the diameter of a Binary Tree.
    int ans=0;
    int diameter(Node* root) {
        if(!root)return 0;
        
        int left = diameter(root->left);
        int right = diameter(root->right);
        ans = max(ans, 1+left+right);
     
       return 1+ max(left,right);
    }
};


// gfg solution.....////


class Solution {
    private:
    pair<int,int> diameterFast(Node* root){
        if(!root){
            pair<int,int>p = make_pair(0,0);
            return p;
        }
      pair<int,int>left =  diameterFast(root->left);
      pair<int,int>right =  diameterFast(root->right);
      
      int op1 = left.first;
      int op2 = right.first;
      int op3 = left.second + right.second+ 1;
      pair<int,int>ans;
      
      ans.first = max(op1,max(op2,op3));
      ans.second =max(left.second , right.second) + 1;
      return ans;
        
    }
  public:
    // Function to return the diameter of a Binary Tree.
    int diameter(Node* root) {
       return diameterFast(root).first;
    }
};
