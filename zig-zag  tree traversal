
///................ leetCode solution............/////

class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        queue<TreeNode*> q;
        int c=0;
        if(!root)
            return ans;
        q.push(root);
        while(!q.empty()){
            int n=q.size();
            vector<int> v;
            while(n--){
                TreeNode* x=q.front();
                q.pop();
                v.push_back(x->val);
                if(x->left)
                    q.push(x->left);
                if(x->right)
                    q.push(x->right);
            }
            if(c%2 != 0){
                reverse(v.begin(),v.end());
            }  
            ans.push_back(v);
            c++;
        }
        return ans;
    }
};

////////////...........gfg solution.............///////////


class Solution{
    public:
    //Function to store the zig zag order traversal of tree in a list.
    vector<int> zigZagTraversal(Node* root)
    {
     vector<int>result;
     if(!root){
        return  result;
     }
     
     queue<Node*>q;
     q.push(root);
     bool leftToRight = true;
     
     while(!q.empty()){
         int size = q.size();
         
         vector<int>ans(size);
         
         for(int  i= 0 ; i<size ; i++){
            Node* temp = q.front();
            q.pop();
            
            int index = leftToRight ? i : size-i-1;
            ans[index] = temp->data;
            
            if(temp->left){
                q.push(temp->left);
            }
            
            if(temp->right){
                q.push(temp->right);
            }
         }
         
         leftToRight = !leftToRight;
         
         for(auto i : ans){
             result.push_back(i);
         }
     }
     return result;
    }
};
